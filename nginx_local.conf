# user www-data;
# user nobody;
worker_processes auto;
# pid /run/nginx.pid;

# nginx worker の設定
worker_rlimit_nofile  4096;
events {
  worker_connections  1024;
}

http {
  lua_package_path "/Users/kubochourei/isucon6-final/lua/redis.lua";
  ##
  # Logging Settings
  ##
  log_format main '$remote_addr - $remote_user [$time_local] "$request" $status $body_bytes_sent "$http_referer" "$http_user_agent" $request_time';   # kataribe 用の log format
  access_log  /var/log/access.log  main;   # これはしばらく on にして、最後に off にすると良さそう。
  error_log /var/log/error.log;

  ##
  # Basic Settings
  ##

  sendfile on;
  tcp_nopush on;
  tcp_nodelay on;
  keepalive_timeout 65;
  types_hash_max_size 2048;
  # server_tokens off;

  # server_names_hash_bucket_size 64;
  # server_name_in_redirect off;

  include /usr/local/etc/nginx/mime.types;
  default_type application/octet-stream;

  ##
  # SSL Settings
  ##

  # ssl_protocols TLSv1 TLSv1.1 TLSv1.2; # Dropping SSLv3, ref: POODLE
  # ssl_prefer_server_ciphers on;

  ##
  # Gzip Settings
  ##

  gzip on;
  gzip_disable "msie6";

  # gzip_vary on;
  # gzip_proxied any;
  # gzip_comp_level 6;
  # gzip_buffers 16 8k;
  # gzip_http_version 1.1;
  # gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

  ##
  # Virtual Host Configs
  ##

  # include /etc/nginx/conf.d/*.conf;
  # include /etc/nginx/sites-enabled/*;

  upstream react {
    server localhost:3000;       # host 2
    # server 54.238.174.46:3000;   # host 1
    # server 54.199.141.147:3000;  # host 4
    # server 54.238.182.113:3000;  # host 5
    # keepalive 32;  # For keepalive
  }

  upstream ruby {
    server localhost:8080;       # host 2
    # server 54.238.174.46:8080;   # host 1
    # server 54.199.141.147:8080;  # host 4
    # server 54.238.182.113:8080;  # host 5
    # keepalive 100;  # For keepalive
  }

  server {
    # listen 80 default_server;
    # listen [::]:80 default_server;
    listen 443 default ssl http2;
    ssl on;
    # server_name 54.250.174.206;
    ssl_certificate /Users/kubochourei/.ssh/cert.crt;
    ssl_certificate_key /Users/kubochourei/.ssh/cert.key;

    root /Users/kubochourei/isucon6-final/webapp/react/public/;
    location /css {
      expires 24h;
      add_header Cache-Control public;

      gzip on;
      gzip_disable "msie6";
      gzip_static on;  # nginx configure時に --with-http_gzip_static_module 必要
    }

    location /favicon.ico {
      expires 24h;
      add_header Cache-Control public;

      gzip on;
      gzip_disable "msie6";
      gzip_static on;  # nginx configure時に --with-http_gzip_static_module 必要
    }

    location /bundle.js {
      expires 24h;
      add_header Cache-Control public;

      gzip on;
      gzip_disable "msie6";
      gzip_static on;  # nginx configure時に --with-http_gzip_static_module 必要
    }

    # index index.html index.htm index.nginx-debian.html;
    # server_name _;
    # location / {
    #   # First attempt to serve request as file, then
    #   # as directory, then fall back to displaying a 404.
    #   try_files $uri $uri/ =404;
    # }

    location / {
      proxy_pass http://react;
    }

    location /rooms/ {
      proxy_pass http://ruby;
    }

    location /proxy/img {
      proxy_pass http://ruby;
    }

    location /img {
      default_type 'image/svg+xml; charset=utf-8';
      content_by_lua_file /Users/kubochourei/isucon6-final/lua/img.lua;
    }

    location /api {
      proxy_pass http://ruby;
      # proxy_http_version 1.1;           # For keepalive
      # proxy_set_header Connection '';
    }

    location /api/stream {
      proxy_pass http://ruby;

      # "magic trio" making EventSource working through Nginx
      proxy_set_header Connection '';
      proxy_http_version 1.1;
      chunked_transfer_encoding off;
      # These are not an official way
      proxy_buffering off;
      # proxy_cache off;
    }

    location /lua-test {
        default_type 'text';
        content_by_lua_block {
          local redis = require "resty.redis"
          local red = redis:new()

          red:set_timeout(1000)

          local uri = ngx.var.request_uri
          local ok, err = red:connect("127.0.0.1", 6379)
          if not ok then
             ngx.say("failed to connect: ", err)
             return
          end
          local res, err = red:get(uri)
          if not res then
             ngx.say("failed to get dog: ", err)
             return
          end

        }
    }
  }
}
